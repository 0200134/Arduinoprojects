#include <DHT.h>
#include <EdgeImpulseModel.h> // Include the model header file generated by Edge Impulse

#define DHTPIN 2 // Pin where the DHT11 is connected
#define DHTTYPE DHT11
#define PIRPIN 3 // Pin where the PIR sensor is connected

DHT dht(DHTPIN, DHTTYPE);
const int tempSensorPin = A0;
const int lightSensorPin = A1;
const int soundSensorPin = A2;
const int airQualitySensorPin = A3;
int pirState = LOW; // PIR motion sensor state

void setup() {
  Serial.begin(9600);
  pinMode(PIRPIN, INPUT);
  dht.begin();
  // Initialize the Edge Impulse model
  if (!ei_impulse_start()) {
    Serial.println("Failed to initialize the model!");
    while (1);
  }
}

void loop() {
  // Read temperature from LM35
  float temperature = analogRead(tempSensorPin) * 0.48828125; // Direct conversion for efficiency

  // Read humidity and temperature from DHT11
  float humidity = dht.readHumidity();
  float temperatureDHT = dht.readTemperature();

  // Read light level from LDR
  int lightLevel = analogRead(lightSensorPin);

  // Read sound level from sound sensor
  int soundLevel = analogRead(soundSensorPin);

  // Read air quality level from MQ135
  int airQualityLevel = analogRead(airQualitySensorPin);

  // Read motion from PIR sensor
  pirState = digitalRead(PIRPIN);

  // Check if any readings failed
  if (isnan(humidity) || isnan(temperatureDHT)) {
    Serial.println("Failed to read from DHT sensor!");
  } else {
    // Prepare features buffer and run the model
    ei_impulse_features[0] = temperature;
    ei_impulse_features[1] = humidity;
    ei_impulse_features[2] = lightLevel;
    ei_impulse_features[3] = soundLevel;
    ei_impulse_features[4] = airQualityLevel;
    ei_impulse_features[5] = pirState;
    ei_impulse_result_t result = ei_impulse_run();

    // Print the results
    Serial.print("LM35 Temperature: ");
    Serial.print(temperature);
    Serial.print(" °C, DHT11 Temperature: ");
    Serial.print(temperatureDHT);
    Serial.print(" °C, Humidity: ");
    Serial.print(humidity);
    Serial.print(" %, Light Level: ");
    Serial.print(lightLevel);
    Serial.print(", Sound Level: ");
    Serial.print(soundLevel);
    Serial.print(", Air Quality: ");
    Serial.print(airQualityLevel);
    Serial.print(", Motion: ");
    Serial.print(pirState ? "Detected" : "Not Detected");
    Serial.print(" - Predicted label: ");
    Serial.println(result.classification[0].label);
  }

  delay(2000); // Delay for 2 seconds
}
